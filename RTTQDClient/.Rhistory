private$password <- password
private$quoteStorage <- quoteStorage
},
#' @description
#' Get Bar History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @param periodicity Periodicity. One from c("S1", "S10", "M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1")
#' @param type Type. One from c("Bids", "Asks", "BidAsk")
#' @return data.table with BarsHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' bars <- qdClient$GetBarsHistory("EURUSD", ISOdate(2019, 1, 1, tz = "UTC"), ISOdate(2020, 1, 1, tz = "UTC"), "M1", "Bids")
GetBarsHistory = function(symbol, startDate =ISOdate(2019, 1, 1, tz = "UTC"), endDate=ISOdate(2020, 1, 1, tz = "UTC"), periodicity="M1", type="Bids") {
if(!is.element(periodicity, private$periodicities))
stop(paste("Wrong periodicity", periodicity, "Use one from", paste(private$periodicities)))
if(!is.element(type, c("Bids", "Asks", "BidAsk")))
stop(paste("Wrong Bar Type", private$types, "Use one from", paste(private$types)))
if(type == "BidAsk"){
asks <- private$GetBars(symbol, startDate, endDate, periodicity, "Asks")
bids <- private$GetBars(symbol, startDate, endDate, periodicity, "Bids")
res <- merge(asks, bids, by="date_time", suffixes = c(".ask", ".bid"))
setnafill(res, type=c("locf"), cols=seq_along(res))
setnafill(res, type=c("nocb"), cols=seq_along(res))
return(res)
}
return(private$GetBars(symbol, startDate, endDate, periodicity, type))
},
#' @description
#' Get Ticks History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @return data.table with TicksHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' ticks <- qdClient$GetTickHistory("EURUSD", ISOdate(2020, 1, 1, tz = "UTC"), ISOdate(2020, 1, 2, tz = "UTC"))
GetTickHistory = function(symbol, startDate = Sys.Date() - days(1), endDate = Sys.Date()) {
qdFileName <- file.path(private$quoteStorage, paste0(symbol, " ", format(startDate, "%Y%m%d"), " ", format(endDate, "%Y%m%d"), ".csv"))
if( !file.exists(qdFileName) ){
private$DownloadQuotes(symbol, startDate, endDate, "", type = "ticks")
}
d <- fread(qdFileName, sep = ";", dec = ",", skip = 1, header = FALSE, col.names = c("date_time", "bid_price", "bid_volume", "ask_price", "ask_volume"))
d[, date_time := lubridate::ymd_hms(date_time)]
return(d)
},
#' @description
#' Get Path to Quote Storage.
#' @return Path to Quote Storage
#' Get Quote Storage
GetQuoteStorage = function(){
return(private$quoteStorage)
},
#' @description
#'
CleanStorage = function(){
"Clean Storage"
unlink(private$quoteStorage, recursive = TRUE, force = TRUE)
}
),
active = list(
quoteStorageProperties = function(value) {
if (missing(value)) {
private$quoteStorage
} else {
stopifnot(is.character(value), length(value) == 1)
private$quoteStorage <- value
self
}
}
)
)
library(data.table)
library(lubridate)
library(R^)
library(R6)
#' R6 Class Representing a TickTrader QuotesDownloader Tool
#'@importFrom R6 R6Class
#'@import data.table
#'@description
#'A R Client for TickTrader Quote Downlodaer
#'
#'@details
#'A R Client to Download Quote History from TickTrader
#'@export
RTTQDClient <- R6Class("RTTQDClient",
private = list(
#' @field Server. Address to Download QuoteHistory from.
server = NULL,
#' @field Client Login
login = NULL,
#' @field TT Client Password.
password = NULL,
#' @field Folder Path to save downloaded quoteHistory Files.
quoteStorage =  NULL,
DownloadQuotes = function(symbol, startDate, endDate, periodicity, type){
parameters <- sprintf("-a=%s -p=5042 -u=%s -w=%s -s=%s -f=%s -t=%s -o=csv -v=false -d=%s -l=\"%s\" -r=%s",
private$server, private$login, private$password, symbol, startDate, endDate, periodicity, private$quoteStorage, type)
# fileName <- file.path("C:\\Users\\yury.maisiayonak\\Desktop\\RTTQDClient\\data\\QuotesDownloader", "QuotesDownloader.exe")
fileName <- system.file("QuotesDownloader", "QuotesDownloader.exe", package = "RTTQDClient")
tryCatch({
system2(fileName, parameters, stdout = TRUE, timeout = 200)
}, warning = function(w){
if(grepl("timed out", w$message)){
stop(paste("Time out. Please check your TTS client credentials"))
}else{
message("Warning", w$message)
}
},
error = function(e){
stop(paste("Error", e$message))
})
},
GetBars = function(symbol, startDate=ISOdate(2019, 1, 1, tz = "UTC"), endDate=ISOdate(2020, 1, 1,  tz = "UTC"), periodicity="M1", type="Bids"){
qdFileName <- file.path(private$quoteStorage, paste0(symbol, " ", substr(type, 0, 3), " ", periodicity, "  ", format(startDate, "%Y%m%d"), "  ", format(endDate, "%Y%m%d"), ".csv"))
if( !file.exists(qdFileName) ){
private$DownloadQuotes(symbol, startDate, endDate, periodicity, type)
}
d <- fread(qdFileName, col.names = c("date_time", "open", "close", "low", "high", "volume"))
d[,date_time:=lubridate::ymd_hms(date_time)]
return(d)
},
periodicities = c("S1", "S10", "M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1"),
types = c("Bids", "Asks", "BidAsk"),
finalize = function() {
print("remove RQD object")
}
),
public = list(
#' @description
#' Create RTTQDClient object.
#' @param server Server
#' @param login Login
#' @param password Password
#' @param quoteStorage QuoteStorage Path
#' @return A new RTTQDClient object.
initialize = function(server = "ttlive.fxopen.com", login = "100", password = "TTqfdeppmhDR", quoteStorage =  normalizePath(".//Quotes")){
private$server <- server
private$login <- login
private$password <- password
private$quoteStorage <- quoteStorage
},
#' @description
#' Get Bar History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @param periodicity Periodicity. One from c("S1", "S10", "M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1")
#' @param type Type. One from c("Bids", "Asks", "BidAsk")
#' @return data.table with BarsHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' bars <- qdClient$GetBarsHistory("EURUSD", ISOdate(2019, 1, 1, tz = "UTC"), ISOdate(2020, 1, 1, tz = "UTC"), "M1", "Bids")
GetBarsHistory = function(symbol, startDate =ISOdate(2019, 1, 1, tz = "UTC"), endDate=ISOdate(2020, 1, 1, tz = "UTC"), periodicity="M1", type="Bids") {
if(!is.element(periodicity, private$periodicities))
stop(paste("Wrong periodicity", periodicity, "Use one from", paste(private$periodicities)))
if(!is.element(type, c("Bids", "Asks", "BidAsk")))
stop(paste("Wrong Bar Type", private$types, "Use one from", paste(private$types)))
if(type == "BidAsk"){
asks <- private$GetBars(symbol, startDate, endDate, periodicity, "Asks")
bids <- private$GetBars(symbol, startDate, endDate, periodicity, "Bids")
res <- merge(asks, bids, by="date_time", suffixes = c(".ask", ".bid"))
setnafill(res, type=c("locf"), cols=seq_along(res))
setnafill(res, type=c("nocb"), cols=seq_along(res))
return(res)
}
return(private$GetBars(symbol, startDate, endDate, periodicity, type))
},
#' @description
#' Get Ticks History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @return data.table with TicksHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' ticks <- qdClient$GetTickHistory("EURUSD", ISOdate(2020, 1, 1, tz = "UTC"), ISOdate(2020, 1, 2, tz = "UTC"))
GetTickHistory = function(symbol, startDate = Sys.Date() - days(1), endDate = Sys.Date()) {
qdFileName <- file.path(private$quoteStorage, paste0(symbol, " ", format(startDate, "%Y%m%d"), " ", format(endDate, "%Y%m%d"), ".csv"))
if( !file.exists(qdFileName) ){
private$DownloadQuotes(symbol, startDate, endDate, "", type = "ticks")
}
d <- fread(qdFileName, sep = ";", dec = ",", skip = 1, header = FALSE, col.names = c("date_time", "bid_price", "bid_volume", "ask_price", "ask_volume"))
d[, date_time := lubridate::ymd_hms(date_time)]
return(d)
},
#' @description
#' Get Path to Quote Storage.
#' @return Path to Quote Storage
#' Get Quote Storage
GetQuoteStorage = function(){
return(private$quoteStorage)
},
#' @description
#'
CleanStorage = function(){
"Clean Storage"
unlink(private$quoteStorage, recursive = TRUE, force = TRUE)
}
),
active = list(
quoteStorageProperties = function(value) {
if (missing(value)) {
private$quoteStorage
} else {
stopifnot(is.character(value), length(value) == 1)
private$quoteStorage <- value
self
}
}
)
)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$GetBarsHistory("EURUSD")
DownloadQuotes = function(symbol, startDate, endDate, periodicity, type){
parameters <- sprintf("-a=%s -p=5042 -u=%s -w=%s -s=%s -f=%s -t=%s -o=csv -v=false -d=%s -l=\"%s\" -r=%s",
server, login, password, symbol, startDate, endDate, periodicity, quoteStorage, type)
# fileName <- file.path("C:\\Users\\yury.maisiayonak\\Desktop\\RTTQDClient\\data\\QuotesDownloader", "QuotesDownloader.exe")
fileName <- system.file("QuotesDownloader", "QuotesDownloader.exe", package = "RTTQDClient")
tryCatch({
system2(fileName, parameters, stdout = TRUE, timeout = 200)
}, warning = function(w){
if(grepl("timed out", w$message)){
stop(paste("Time out. Please check your TTS client credentials"))
}else{
message("Warning", w$message)
}
},
error = function(e){
stop(paste("Error", e$message))
})
}
server = "ttlive.fxopen.com"
login = "100"
password = "TTqfdeppmhDR"
quoteStorage =  normalizePath(".//Quotes")
DownloadQuotes("EURUSD", as.POSIXct("2021-04-01 12:15:00", tz = "GMT"), as.POSIXct("2021-04-02 12:15:00", tz = "GMT"), "", "ticks")
DownloadQuotes("EURUSD", as.POSIXct("2021-04-01 12:15:00", tz = "GMT"), as.POSIXct("2021-04-03 12:15:00", tz = "GMT"))
DownloadQuotes("EURUSD", as.POSIXct("2021-04-01 12:15:00", tz = "GMT"), as.POSIXct("2021-04-03 12:15:00", tz = "GMT"))
DownloadQuotes("EURUSD", as.POSIXct("2021-04-01 12:15:00", tz = "GMT"), as.POSIXct("2021-04-03 12:15:00", tz = "GMT"), "", "ticks")
startDate = as.Date("2019-01-01")
format(startDate, "%Y%m%d-%H-%M-%S")
startDate
str(startDate)
startDate = as.POSIXct("2019-01-01", tz = "UTC")
format(startDate, "%Y%m%d-%H-%M-%S")
#' R6 Class Representing a TickTrader QuotesDownloader Tool
#'@importFrom R6 R6Class
#'@import data.table
#'@description
#'A R Client for TickTrader Quote Downlodaer
#'
#'@details
#'A R Client to Download Quote History from TickTrader
#'@export
RTTQDClient <- R6Class("RTTQDClient",
private = list(
#' @field Server. Address to Download QuoteHistory from.
server = NULL,
#' @field Client Login
login = NULL,
#' @field TT Client Password.
password = NULL,
#' @field Folder Path to save downloaded quoteHistory Files.
quoteStorage =  NULL,
DownloadQuotes = function(symbol, startDate, endDate, periodicity, type){
parameters <- sprintf("-a=%s -p=5042 -u=%s -w=%s -s=%s -f=%s -t=%s -o=csv -v=false -d=%s -l=\"%s\" -r=%s",
private$server, private$login, private$password, symbol, startDate, endDate, periodicity, private$quoteStorage, type)
# fileName <- file.path("C:\\Users\\yury.maisiayonak\\Desktop\\RTTQDClient\\data\\QuotesDownloader", "QuotesDownloader.exe")
fileName <- system.file("QuotesDownloader", "QuotesDownloader.exe", package = "RTTQDClient")
tryCatch({
system2(fileName, parameters, stdout = TRUE, timeout = 200)
}, warning = function(w){
if(grepl("timed out", w$message)){
stop(paste("Time out. Please check your TTS client credentials"))
}else{
message("Warning", w$message)
}
},
error = function(e){
stop(paste("Error", e$message))
})
},
GetBars = function(symbol, startDate = as.Date("2020-01-01"), endDate = as.Date("2020-01-02"), periodicity="M1", type="Bids"){
qdFileName <- file.path(private$quoteStorage, paste0(symbol, " ", substr(type, 0, 3), " ", periodicity, "  ", format(startDate, "%Y%m%d-%H-%M-%S"), "  ", format(endDate, "%Y%m%d-%H-%M-%S"), ".csv"))
if( !file.exists(qdFileName) ){
private$DownloadQuotes(symbol, startDate, endDate, periodicity, type)
}
d <- fread(qdFileName, col.names = c("date_time", "open", "close", "low", "high", "volume"))
d[,date_time:=lubridate::ymd_hms(date_time)]
return(d)
},
periodicities = c("S1", "S10", "M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1"),
types = c("Bids", "Asks", "BidAsk"),
finalize = function() {
print("remove RQD object")
}
),
public = list(
#' @description
#' Create RTTQDClient object.
#' @param server Server
#' @param login Login
#' @param password Password
#' @param quoteStorage QuoteStorage Path
#' @return A new RTTQDClient object.
initialize = function(server = "ttlive.fxopen.com", login = "100", password = "TTqfdeppmhDR", quoteStorage =  normalizePath(".//Quotes")){
private$server <- server
private$login <- login
private$password <- password
private$quoteStorage <- quoteStorage
},
#' @description
#' Get Bar History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @param periodicity Periodicity. One from c("S1", "S10", "M1", "M5", "M15", "M30", "H1", "H4", "D1", "W1", "MN1")
#' @param type Type. One from c("Bids", "Asks", "BidAsk")
#' @return data.table with BarsHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' bars <- qdClient$GetBarsHistory("EURUSD", as.Date("2020-01-01"), as.Date("2020-01-02"), "M1", "Bids")
GetBarsHistory = function(symbol, startDate = as.Date("2020-01-01"), endDate = as.Date("2020-01-02"), periodicity="M1", type="Bids") {
if(!is.element(periodicity, private$periodicities))
stop(paste("Wrong periodicity", periodicity, "Use one from", paste(private$periodicities)))
if(!is.element(type, c("Bids", "Asks", "BidAsk")))
stop(paste("Wrong Bar Type", private$types, "Use one from", paste(private$types)))
if(type == "BidAsk"){
asks <- private$GetBars(symbol, startDate, endDate, periodicity, "Asks")
bids <- private$GetBars(symbol, startDate, endDate, periodicity, "Bids")
res <- merge(asks, bids, by="date_time", suffixes = c(".ask", ".bid"))
setnafill(res, type=c("locf"), cols=seq_along(res))
setnafill(res, type=c("nocb"), cols=seq_along(res))
return(res)
}
return(private$GetBars(symbol, startDate, endDate, periodicity, type))
},
#' @description
#' Get Ticks History
#' @param symbol SymbolName.
#' @param startDate StartDate in ISO Format (UTC timezone)
#' @param endDate EndDate in ISO Format (UTC timezone)
#' @return data.table with TicksHistory
#' @examples
#' qdClient <- RTTQDClient$new()
#' ticks <- qdClient$GetTickHistory("EURUSD", as.Date("2020-01-01"), as.Date("2020-01-02"))
GetTickHistory = function(symbol, startDate = Sys.Date() - days(1), endDate = Sys.Date()) {
qdFileName <- file.path(private$quoteStorage, paste0(symbol, " ", format(startDate, "%Y%m%d-%H-%M-%S"), " ", format(endDate, "%Y%m%d-%H-%M-%S"), ".csv"))
if( !file.exists(qdFileName) ){
private$DownloadQuotes(symbol, startDate, endDate, "", type = "ticks")
}
d <- fread(qdFileName, sep = ";", dec = ",", skip = 1, header = FALSE, col.names = c("date_time", "bid_price", "bid_volume", "ask_price", "ask_volume"))
d[, date_time := lubridate::ymd_hms(date_time)]
return(d)
},
#' @description
#' Get Path to Quote Storage.
#' @return Path to Quote Storage
#' Get Quote Storage
GetQuoteStorage = function(){
return(private$quoteStorage)
},
#' @description
#'
CleanStorage = function(){
"Clean Storage"
unlink(private$quoteStorage, recursive = TRUE, force = TRUE)
}
),
active = list(
quoteStorageProperties = function(value) {
if (missing(value)) {
private$quoteStorage
} else {
stopifnot(is.character(value), length(value) == 1)
private$quoteStorage <- value
self
}
}
)
)
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t2 <- t1$GetBarsHistory("EURUSD")
t2
t2
t2 <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
t2
t2 <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
t2
t2 <- t1$GetBarsHistory("EURUSD", type = "Ask")
t2 <- t1$GetBarsHistory("EURUSD", type = "Asks")
t2
t2
t2 <- t1$GetTickHistory("EURUSD")
t2
t2
t1
t1$GetBarsHistory()
t1$GetBarsHistory("EURUSD")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
gc()
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
t1$GetBarsHistory("EURUSD", startDate = as.POSIXct("2021-02-01"), as.POSIXct("2021-02-02"))
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
library(RTTQDClient)
t1 <- RTTQDClient$new()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
bids <- t1$GetBarsHistory("EURUSD",)
bids <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
bids
help(package = "RTTQDClient")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
help(package = "RTTQDClient")
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
bids <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
bids <-t1$GetBarsHistory("EURUSD")
t1$GetQuoteStorage()
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
t1$GetQuoteStorage()
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
t1$GetQuoteStorage()
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD")
t1$CleanStorage()
t1$GetQuoteStorage()
t1$GetQuoteStoragePath()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
library(roxygen2md)
install.packages("roxygen2md")
install.packages("Rd2markdown")
install.packages("Rd2md’")
install.packages("Rd2md")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
library(RTTQDClient)
t1 <- RTTQDClient$new()
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD", startDate = as.POSIXct("2021-02-01"), as.POSIXct("2021-02-02"))
library(RTTQDClient)
library(RTTQDClient)
t1 <- RTTQDClient$new()
t1$GetBarsHistory("EURUSD", startDate = as.POSIXct("2021-02-01"), as.POSIXct("2021-02-02"))
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
bids <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
ticks <- t1$GetTickHistory("EURUSD")
bids <-t1$GetBarsHistory("EURUSD")
install.packages("C:/Users/yury.maisiayonak/Desktop/RTTQDClient_0.1.0.tar.gz", repos = NULL, type = "source")
library(RTTQDClient)
t1 <- RTTQDClient$new()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
bids <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
bids
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
bidask <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
View(bidask)
View(ask)
View(bids)
View(ask)
View(bids)
View(bidask)
library(RTTQDClient)
t1 <- RTTQDClient$new()
bids <-t1$GetBarsHistory("EURUSD")
ask <- t1$GetBarsHistory("EURUSD", type = "Asks")
bidask <- t1$GetBarsHistory("EURUSD", type = "BidAsk")
View(bidask)
help(package = RTTQDClient)
t1$quoteStorage
devtools::document()
library(Rd2md)
Rd2md::Rd2markdown("C:\\Users\\yury.maisiayonak\\Desktop\\RTTQDClient\\man\\RTTQDClient.Rd")
Rd2md::Rd2markdown("C:\\Users\\yury.maisiayonak\\Desktop\\RTTQDClient\\man\\RTTQDClient.Rd", "out.md")
